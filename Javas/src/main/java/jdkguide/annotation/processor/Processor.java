package jdkguide.annotation.processor;

import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import jdkguide.annotation.processor.FastStart.TestJavaDefinition;
import jdkguide.annotation.processor.FastStart.TestJavaDefinition.Default;
import org.springframework.stereotype.Component;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import java.io.IOException;
import java.util.Set;

@SupportedSourceVersion(SourceVersion.RELEASE_8)
@SupportedAnnotationTypes({
        "Component"
})
public class Processor extends AbstractProcessor {

    private Filer filer;

    protected TestJavaDefinition javaDefinition;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        filer = processingEnv.getFiler();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        // 获取所有被 @DemoAnnotation 注解的类
        Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(Component.class);
        javaDefinition = new Default();

        TypeSpec typeSpec = TypeSpec.classBuilder(javaDefinition.className())
                .addModifiers(Modifier.FINAL, Modifier.PUBLIC)
                .addJavadoc(
                        "This java file generated by %s from %s!",
                        this.getClass().getName(),javaDefinition.controllerClass().getName())
                .addField(
                        FieldSpec.builder(
                                TypeName.get(javaDefinition.controllerClass()),
                                javaDefinition.controllerClass().getSimpleName(),
                                Modifier.PRIVATE
                        ).build())
                .build();
        JavaFile javaFile = JavaFile.builder(javaDefinition.packageName(), typeSpec).build();
        try{
            javaFile.writeTo(filer);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
}
